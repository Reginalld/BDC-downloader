import logging
import math
import os
from typing import List, Optional, Tuple

from .bounding_box_calculator import BoundingBoxCalculator


class BoundingBoxHandler:
    def __init__(self, logger: logging.Logger, reduction_factor: float = 0.2):
        self.reduction_factor = reduction_factor
        self.logger = logger

    def calculate_reduced_bbox(self, tile_grid: any) -> List[float]:
        """
        Calcula uma bounding box reduzida com base na geometria do tile.
        """
        tile_geometry = tile_grid.geometry.iloc[0]
        minx, miny, maxx, maxy = tile_geometry.bounds

        center_x = (minx + maxx) / 2
        center_y = (miny + maxy) / 2

        width = (maxx - minx) * self.reduction_factor
        height = (maxy - miny) * self.reduction_factor

        new_minx = center_x - (width / 2)
        new_maxx = center_x + (width / 2)
        new_miny = center_y - (height / 2)
        new_maxy = center_y + (height / 2)

        self.logger.info(
            f"Main_bbox ajustado: "
            f"[{new_minx}, {new_miny}, {new_maxx}, {new_maxy}]"
        )
        return [new_minx, new_miny, new_maxx, new_maxy]

    def obter_bounding_box(
        self,
        tile_id: Optional[str],
        lat: Optional[float],
        lon: Optional[float],
        radius_km: float,
        tile_grid_path: str,
        satellite: str
    ) -> Tuple[List[float], float, float, float]:
        """
        Gera uma bounding box com base em tile_id ou coordenadas.
        """
        if tile_id:
            import geopandas as gpd
            if not os.path.isfile(tile_grid_path):
                logging.error(
                    f"Arquivo Shapefile não encontrado: {tile_grid_path}"
                )
                raise FileNotFoundError(
                    f"Shapefile não encontrado no caminho: {tile_grid_path}"
                )

            tile_grid = gpd.read_file(tile_grid_path)
            if satellite == "S2_L2A-1":
                tile_grid = tile_grid[tile_grid["NAME"] == tile_id]
            else:
                path = int(tile_id[:3])
                row = int(tile_id[3:])
                tile_grid = tile_grid[
                    (tile_grid["PATH"] == path) & (tile_grid["ROW"] == row)
                ]

            if tile_grid.empty:
                self.logger.error(
                    f"Tile {tile_id} não encontrado na grade Sentinel-2."
                )
                raise ValueError(f"Tile ID inválido: {tile_id}")

            tile_geometry = tile_grid.geometry.iloc[0]
            minx, miny, maxx, maxy = tile_geometry.bounds

            center_x = (minx + maxx) / 2
            center_y = (miny + maxy) / 2
            width = (maxx - minx) * self.reduction_factor
            height = (maxy - miny) * self.reduction_factor

            new_minx = center_x - (width / 2)
            new_maxx = center_x + (width / 2)
            new_miny = center_y - (height / 2)
            new_maxy = center_y + (height / 2)

            main_bbox = [new_minx, new_miny, new_maxx, new_maxy]

            lat = (miny + maxy) / 2
            lon = (minx + maxx) / 2
            bbox_width_km = (
                (maxx - minx) * 111 * math.cos(math.radians(lat))
            )
            bbox_height_km = (maxy - miny) * 111
            radius_km = max(bbox_width_km, bbox_height_km) / 2

        elif lat is not None and lon is not None:
            main_bbox = BoundingBoxCalculator.calculate(lat, lon, radius_km)
            self.logger.info("Processando sem tile ID.")
        else:
            self.logger.error(
                "É necessário fornecer latitude/longitude "
                "ou um ID de tile Sentinel-2."
            )
            raise ValueError(
                "Faltam parâmetros para definir a área de interesse."
            )

        self.logger.info(f"BBox principal: {main_bbox}")
        return main_bbox, lat, lon, radius_km
